allprojects {
    apply plugin: "idea"
    apply from: "idea.gradle"

    task wrapper(type: Wrapper) {
        gradleVersion = 2.3
    }
}

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "com.palantir:gradle-gitsemver:$git_semver_version"
    }
}

repositories {
    jcenter()
    maven { url "https://clojars.org/repo" }
    flatDir { dirs 'lib' }
}

apply plugin: "gitsemver"
apply plugin: "scala"
apply plugin: "distribution"


// In this section you declare the dependencies for your production and test code
dependencies {
    // Overtone Wrapper
    compile(project(':overtone-wrapper'))

    // Scala
    compile "org.scala-lang:scala-library:$scala_version"
    compile "org.scala-lang:scala-compiler:$scala_version"
    compile "jline:jline:$jline_version"

    // Guava
    //compile "com.google.guava:guava:$guava_version"


    // Concurrency
    compile "com.typesafe.akka:akka-testkit_2.11:$akka_version"
    compile "com.typesafe.akka:akka-actor_2.11:$akka_version"
    compile "com.typesafe.akka:akka-remote_2.11:$akka_version"

    // Groovy
    runtime "org.codehaus.groovy:groovy-all:$groovy_version"

    // MIDI
    compile name: "jfugue-5.0.1"
    compile name: "jMusic1.6.4"


    // Dependency Injection
    //compile "net.codingwell:scala-guice_2.10:$scala_guice_version"

    // Logging
    compile ("com.typesafe.akka:akka-slf4j_2.11:$akka_version") {
        exclude group: "org.slf4j"
    }
    compile "ch.qos.logback:logback-classic:$logback_version"

    // We use Scalatest for testing our library
    testCompile "junit:junit:$junit_version"
    testCompile "org.scalatest:scalatest_2.11:$scalatest_version"
    testCompile "org.scalamock:scalamock-scalatest-support_2.11:$scalatest_mock_version"
    //testCompile "org.mockito:mockito-all:$mockito_version"

    testRuntime "org.scala-lang.modules:scala-xml_2.11:$scalaxml_version"
}

task run(type: JavaExec, dependsOn: classes) {
    main = "Main"
    classpath sourceSets.main.runtimeClasspath
    classpath configurations.runtime
}
